/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controller.dao.jdbc;

import co.edu.sena.controller.dao.*;
import co.edu.sena.controller.factory.*;
import java.util.Date;
import co.edu.sena.model.dao.dto.*;
import co.edu.sena.controller.dao.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ObservacionGeneralDaoImpl extends AbstractDAO implements ObservacionGeneralDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT grupo_numero_ficha, grupo_codigo, id_observacion, observacion, jurado, fecha, usuario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( grupo_numero_ficha, grupo_codigo, id_observacion, observacion, jurado, fecha, usuario ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET grupo_numero_ficha = ?, grupo_codigo = ?, id_observacion = ?, observacion = ?, jurado = ?, fecha = ?, usuario = ? WHERE grupo_numero_ficha = ? AND grupo_codigo = ? AND id_observacion = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE grupo_numero_ficha = ? AND grupo_codigo = ? AND id_observacion = ?";

	/** 
	 * Index of column grupo_numero_ficha
	 */
	protected static final int COLUMN_GRUPO_NUMERO_FICHA = 1;

	/** 
	 * Index of column grupo_codigo
	 */
	protected static final int COLUMN_GRUPO_CODIGO = 2;

	/** 
	 * Index of column id_observacion
	 */
	protected static final int COLUMN_ID_OBSERVACION = 3;

	/** 
	 * Index of column observacion
	 */
	protected static final int COLUMN_OBSERVACION = 4;

	/** 
	 * Index of column jurado
	 */
	protected static final int COLUMN_JURADO = 5;

	/** 
	 * Index of column fecha
	 */
	protected static final int COLUMN_FECHA = 6;

	/** 
	 * Index of column usuario
	 */
	protected static final int COLUMN_USUARIO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column grupo_numero_ficha
	 */
	protected static final int PK_COLUMN_GRUPO_NUMERO_FICHA = 1;

	/** 
	 * Index of primary-key column grupo_codigo
	 */
	protected static final int PK_COLUMN_GRUPO_CODIGO = 2;

	/** 
	 * Index of primary-key column id_observacion
	 */
	protected static final int PK_COLUMN_ID_OBSERVACION = 3;

	/** 
	 * Inserts a new row in the observacion_general table.
	 */
	public ObservacionGeneralPk insert(ObservacionGeneral dto) throws ObservacionGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getGrupoNumeroFicha() );
			stmt.setInt( index++, dto.getGrupoCodigo() );
			stmt.setInt( index++, dto.getIdObservacion() );
			stmt.setString( index++, dto.getObservacion() );
			stmt.setString( index++, dto.getJurado() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getUsuario() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ObservacionGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the observacion_general table.
	 */
	public void update(ObservacionGeneralPk pk, ObservacionGeneral dto) throws ObservacionGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getGrupoNumeroFicha() );
			stmt.setInt( index++, dto.getGrupoCodigo() );
			stmt.setInt( index++, dto.getIdObservacion() );
			stmt.setString( index++, dto.getObservacion() );
			stmt.setString( index++, dto.getJurado() );
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			stmt.setString( index++, dto.getUsuario() );
			stmt.setString( 8, pk.getGrupoNumeroFicha() );
			stmt.setInt( 9, pk.getGrupoCodigo() );
			stmt.setInt( 10, pk.getIdObservacion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ObservacionGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the observacion_general table.
	 */
	public void delete(ObservacionGeneralPk pk) throws ObservacionGeneralDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getGrupoNumeroFicha() );
			stmt.setInt( 2, pk.getGrupoCodigo() );
			stmt.setInt( 3, pk.getIdObservacion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ObservacionGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the observacion_general table that matches the specified primary-key value.
	 */
	public ObservacionGeneral findByPrimaryKey(ObservacionGeneralPk pk) throws ObservacionGeneralDaoException
	{
		return findByPrimaryKey( pk.getGrupoNumeroFicha(), pk.getGrupoCodigo(), pk.getIdObservacion() );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'grupo_numero_ficha = :grupoNumeroFicha AND grupo_codigo = :grupoCodigo AND id_observacion = :idObservacion'.
	 */
	public ObservacionGeneral findByPrimaryKey(String grupoNumeroFicha, int grupoCodigo, int idObservacion) throws ObservacionGeneralDaoException
	{
		ObservacionGeneral ret[] = findByDynamicSelect( SQL_SELECT + " WHERE grupo_numero_ficha = ? AND grupo_codigo = ? AND id_observacion = ?", new Object[] { grupoNumeroFicha,  new Integer(grupoCodigo),  new Integer(idObservacion) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria ''.
	 */
	public ObservacionGeneral[] findAll() throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY grupo_numero_ficha, grupo_codigo, id_observacion", null );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'grupo_numero_ficha = :grupoNumeroFicha AND grupo_codigo = :grupoCodigo'.
	 */
	public ObservacionGeneral[] findByGrupoProyecto(String grupoNumeroFicha, int grupoCodigo) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grupo_numero_ficha = ? AND grupo_codigo = ?", new Object[] { grupoNumeroFicha,  new Integer(grupoCodigo) } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'grupo_numero_ficha = :grupoNumeroFicha'.
	 */
	public ObservacionGeneral[] findWhereGrupoNumeroFichaEquals(String grupoNumeroFicha) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grupo_numero_ficha = ? ORDER BY grupo_numero_ficha", new Object[] { grupoNumeroFicha } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'grupo_codigo = :grupoCodigo'.
	 */
	public ObservacionGeneral[] findWhereGrupoCodigoEquals(int grupoCodigo) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grupo_codigo = ? ORDER BY grupo_codigo", new Object[] {  new Integer(grupoCodigo) } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'id_observacion = :idObservacion'.
	 */
	public ObservacionGeneral[] findWhereIdObservacionEquals(int idObservacion) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_observacion = ? ORDER BY id_observacion", new Object[] {  new Integer(idObservacion) } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'observacion = :observacion'.
	 */
	public ObservacionGeneral[] findWhereObservacionEquals(String observacion) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE observacion = ? ORDER BY observacion", new Object[] { observacion } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'jurado = :jurado'.
	 */
	public ObservacionGeneral[] findWhereJuradoEquals(String jurado) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE jurado = ? ORDER BY jurado", new Object[] { jurado } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'fecha = :fecha'.
	 */
	public ObservacionGeneral[] findWhereFechaEquals(Date fecha) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha = ? ORDER BY fecha", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the observacion_general table that match the criteria 'usuario = :usuario'.
	 */
	public ObservacionGeneral[] findWhereUsuarioEquals(String usuario) throws ObservacionGeneralDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario = ? ORDER BY usuario", new Object[] { usuario } );
	}

	/**
	 * Method 'ObservacionGeneralDaoImpl'
	 * 
	 */
	public ObservacionGeneralDaoImpl()
	{
	}

	/**
	 * Method 'ObservacionGeneralDaoImpl'
	 * 
	 * @param userConn
	 */
	public ObservacionGeneralDaoImpl(final Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "observador_de_proyectos.observacion_general";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ObservacionGeneral fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ObservacionGeneral dto = new ObservacionGeneral();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ObservacionGeneral[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ObservacionGeneral dto = new ObservacionGeneral();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ObservacionGeneral ret[] = new ObservacionGeneral[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ObservacionGeneral dto, ResultSet rs) throws SQLException
	{
		dto.setGrupoNumeroFicha( rs.getString( COLUMN_GRUPO_NUMERO_FICHA ) );
		dto.setGrupoCodigo( rs.getInt( COLUMN_GRUPO_CODIGO ) );
		dto.setIdObservacion( rs.getInt( COLUMN_ID_OBSERVACION ) );
		dto.setObservacion( rs.getString( COLUMN_OBSERVACION ) );
		dto.setJurado( rs.getString( COLUMN_JURADO ) );
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setUsuario( rs.getString( COLUMN_USUARIO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ObservacionGeneral dto)
	{
	}

	/** 
	 * Returns all rows from the observacion_general table that match the specified arbitrary SQL statement
	 */
	public ObservacionGeneral[] findByDynamicSelect(String sql, Object[] sqlParams) throws ObservacionGeneralDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ObservacionGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the observacion_general table that match the specified arbitrary SQL statement
	 */
	public ObservacionGeneral[] findByDynamicWhere(String sql, Object[] sqlParams) throws ObservacionGeneralDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ObservacionGeneralDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
