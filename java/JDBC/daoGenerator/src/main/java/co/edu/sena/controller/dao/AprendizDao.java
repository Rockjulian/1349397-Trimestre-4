/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controller.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.controller.dao.exceptions.*;

public interface AprendizDao
{
	/** 
	 * Inserts a new row in the aprendiz table.
	 */
	public AprendizPk insert(Aprendiz dto) throws AprendizDaoException;

	/** 
	 * Updates a single row in the aprendiz table.
	 */
	public void update(AprendizPk pk, Aprendiz dto) throws AprendizDaoException;

	/** 
	 * Deletes a single row in the aprendiz table.
	 */
	public void delete(AprendizPk pk) throws AprendizDaoException;

	/** 
	 * Returns the rows from the aprendiz table that matches the specified primary-key value.
	 */
	public Aprendiz findByPrimaryKey(AprendizPk pk) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'tipo_documento = :tipoDocumento AND numero_documento = :numeroDocumento AND ficha = :ficha AND grupo_codigo = :grupoCodigo'.
	 */
	public Aprendiz findByPrimaryKey(String tipoDocumento, String numeroDocumento, String ficha, int grupoCodigo) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria ''.
	 */
	public Aprendiz[] findAll() throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'estado = :estado'.
	 */
	public Aprendiz[] findByEstadoFormacion(String estado) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'ficha = :ficha AND grupo_codigo = :grupoCodigo'.
	 */
	public Aprendiz[] findByGrupoProyecto(String ficha, int grupoCodigo) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'tipo_documento = :tipoDocumento AND numero_documento = :numeroDocumento'.
	 */
	public Aprendiz[] findByCliente(String tipoDocumento, String numeroDocumento) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'tipo_documento = :tipoDocumento'.
	 */
	public Aprendiz[] findWhereTipoDocumentoEquals(String tipoDocumento) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'numero_documento = :numeroDocumento'.
	 */
	public Aprendiz[] findWhereNumeroDocumentoEquals(String numeroDocumento) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'estado = :estado'.
	 */
	public Aprendiz[] findWhereEstadoEquals(String estado) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'ficha = :ficha'.
	 */
	public Aprendiz[] findWhereFichaEquals(String ficha) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the criteria 'grupo_codigo = :grupoCodigo'.
	 */
	public Aprendiz[] findWhereGrupoCodigoEquals(int grupoCodigo) throws AprendizDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the aprendiz table that match the specified arbitrary SQL statement
	 */
	public Aprendiz[] findByDynamicSelect(String sql, Object[] sqlParams) throws AprendizDaoException;

	/** 
	 * Returns all rows from the aprendiz table that match the specified arbitrary SQL statement
	 */
	public Aprendiz[] findByDynamicWhere(String sql, Object[] sqlParams) throws AprendizDaoException;

}
