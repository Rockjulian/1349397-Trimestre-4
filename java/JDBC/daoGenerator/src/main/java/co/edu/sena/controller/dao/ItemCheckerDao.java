/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controller.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.controller.dao.exceptions.*;

public interface ItemCheckerDao
{
	/** 
	 * Inserts a new row in the item_checker table.
	 */
	public ItemCheckerPk insert(ItemChecker dto) throws ItemCheckerDaoException;

	/** 
	 * Updates a single row in the item_checker table.
	 */
	public void update(ItemCheckerPk pk, ItemChecker dto) throws ItemCheckerDaoException;

	/** 
	 * Deletes a single row in the item_checker table.
	 */
	public void delete(ItemCheckerPk pk) throws ItemCheckerDaoException;

	/** 
	 * Returns the rows from the item_checker table that matches the specified primary-key value.
	 */
	public ItemChecker findByPrimaryKey(ItemCheckerPk pk) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'lista_chequeo = :listaChequeo AND id_item = :idItem'.
	 */
	public ItemChecker findByPrimaryKey(String listaChequeo, int idItem) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria ''.
	 */
	public ItemChecker[] findAll() throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'lista_chequeo = :listaChequeo'.
	 */
	public ItemChecker[] findByListaChequeo(String listaChequeo) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'rae_codigo = :raeCodigo AND competencia_codigo = :competenciaCodigo AND programa_codigo_version = :programaCodigoVersion'.
	 */
	public ItemChecker[] findByRae(String raeCodigo, String competenciaCodigo, String programaCodigoVersion) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'lista_chequeo = :listaChequeo'.
	 */
	public ItemChecker[] findWhereListaChequeoEquals(String listaChequeo) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'id_item = :idItem'.
	 */
	public ItemChecker[] findWhereIdItemEquals(int idItem) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'pregunta = :pregunta'.
	 */
	public ItemChecker[] findWherePreguntaEquals(String pregunta) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'rae_codigo = :raeCodigo'.
	 */
	public ItemChecker[] findWhereRaeCodigoEquals(String raeCodigo) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'competencia_codigo = :competenciaCodigo'.
	 */
	public ItemChecker[] findWhereCompetenciaCodigoEquals(String competenciaCodigo) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the criteria 'programa_codigo_version = :programaCodigoVersion'.
	 */
	public ItemChecker[] findWhereProgramaCodigoVersionEquals(String programaCodigoVersion) throws ItemCheckerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the item_checker table that match the specified arbitrary SQL statement
	 */
	public ItemChecker[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemCheckerDaoException;

	/** 
	 * Returns all rows from the item_checker table that match the specified arbitrary SQL statement
	 */
	public ItemChecker[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemCheckerDaoException;

}
