/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controller.dao;

import co.edu.sena.model.dao.dto.*;
import co.edu.sena.controller.dao.exceptions.*;

public interface GrupoProyectoDao
{
	/** 
	 * Inserts a new row in the grupo_proyecto table.
	 */
	public GrupoProyectoPk insert(GrupoProyecto dto) throws GrupoProyectoDaoException;

	/** 
	 * Updates a single row in the grupo_proyecto table.
	 */
	public void update(GrupoProyectoPk pk, GrupoProyecto dto) throws GrupoProyectoDaoException;

	/** 
	 * Deletes a single row in the grupo_proyecto table.
	 */
	public void delete(GrupoProyectoPk pk) throws GrupoProyectoDaoException;

	/** 
	 * Returns the rows from the grupo_proyecto table that matches the specified primary-key value.
	 */
	public GrupoProyecto findByPrimaryKey(GrupoProyectoPk pk) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'numero_ficha = :numeroFicha AND codigo = :codigo'.
	 */
	public GrupoProyecto findByPrimaryKey(String numeroFicha, int codigo) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria ''.
	 */
	public GrupoProyecto[] findAll() throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'numero_ficha = :numeroFicha'.
	 */
	public GrupoProyecto[] findByFicha(String numeroFicha) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'numero_ficha = :numeroFicha'.
	 */
	public GrupoProyecto[] findWhereNumeroFichaEquals(String numeroFicha) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'codigo = :codigo'.
	 */
	public GrupoProyecto[] findWhereCodigoEquals(int codigo) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'nombre_proyecto = :nombreProyecto'.
	 */
	public GrupoProyecto[] findWhereNombreProyectoEquals(String nombreProyecto) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the criteria 'estado_grupo = :estadoGrupo'.
	 */
	public GrupoProyecto[] findWhereEstadoGrupoEquals(String estadoGrupo) throws GrupoProyectoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the grupo_proyecto table that match the specified arbitrary SQL statement
	 */
	public GrupoProyecto[] findByDynamicSelect(String sql, Object[] sqlParams) throws GrupoProyectoDaoException;

	/** 
	 * Returns all rows from the grupo_proyecto table that match the specified arbitrary SQL statement
	 */
	public GrupoProyecto[] findByDynamicWhere(String sql, Object[] sqlParams) throws GrupoProyectoDaoException;

}
