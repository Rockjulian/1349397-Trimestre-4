/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package co.edu.sena.controller.dao;

import java.util.Date;
import co.edu.sena.model.dao.dto.*;
import co.edu.sena.controller.dao.exceptions.*;

public interface ObservacionItemDao
{
	/** 
	 * Inserts a new row in the observacion_item table.
	 */
	public ObservacionItemPk insert(ObservacionItem dto) throws ObservacionItemDaoException;

	/** 
	 * Updates a single row in the observacion_item table.
	 */
	public void update(ObservacionItemPk pk, ObservacionItem dto) throws ObservacionItemDaoException;

	/** 
	 * Deletes a single row in the observacion_item table.
	 */
	public void delete(ObservacionItemPk pk) throws ObservacionItemDaoException;

	/** 
	 * Returns the rows from the observacion_item table that matches the specified primary-key value.
	 */
	public ObservacionItem findByPrimaryKey(ObservacionItemPk pk) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'id_observacion = :idObservacion AND numero_ficha = :numeroFicha AND grupo_codigo = :grupoCodigo AND lista_chequeo = :listaChequeo AND id_item = :idItem'.
	 */
	public ObservacionItem findByPrimaryKey(int idObservacion, String numeroFicha, int grupoCodigo, String listaChequeo, int idItem) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria ''.
	 */
	public ObservacionItem[] findAll() throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'numero_ficha = :numeroFicha AND grupo_codigo = :grupoCodigo AND lista_chequeo = :listaChequeo AND id_item = :idItem'.
	 */
	public ObservacionItem[] findByRespuestaGrupo(String numeroFicha, int grupoCodigo, String listaChequeo, int idItem) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'id_observacion = :idObservacion'.
	 */
	public ObservacionItem[] findWhereIdObservacionEquals(int idObservacion) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'numero_ficha = :numeroFicha'.
	 */
	public ObservacionItem[] findWhereNumeroFichaEquals(String numeroFicha) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'grupo_codigo = :grupoCodigo'.
	 */
	public ObservacionItem[] findWhereGrupoCodigoEquals(int grupoCodigo) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'lista_chequeo = :listaChequeo'.
	 */
	public ObservacionItem[] findWhereListaChequeoEquals(String listaChequeo) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'id_item = :idItem'.
	 */
	public ObservacionItem[] findWhereIdItemEquals(int idItem) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'observacion = :observacion'.
	 */
	public ObservacionItem[] findWhereObservacionEquals(String observacion) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'jurados = :jurados'.
	 */
	public ObservacionItem[] findWhereJuradosEquals(String jurados) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'fecha = :fecha'.
	 */
	public ObservacionItem[] findWhereFechaEquals(Date fecha) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the criteria 'usuario = :usuario'.
	 */
	public ObservacionItem[] findWhereUsuarioEquals(String usuario) throws ObservacionItemDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the observacion_item table that match the specified arbitrary SQL statement
	 */
	public ObservacionItem[] findByDynamicSelect(String sql, Object[] sqlParams) throws ObservacionItemDaoException;

	/** 
	 * Returns all rows from the observacion_item table that match the specified arbitrary SQL statement
	 */
	public ObservacionItem[] findByDynamicWhere(String sql, Object[] sqlParams) throws ObservacionItemDaoException;

}
